USE BankSystem2;

DROP PROCEDURE IF EXISTS BankViewBalance;
DELIMITER //
CREATE PROCEDURE BankViewBalance(IN
P_ACCOUNT_NO INT,
P_ACCOUNT_TYPE INT)
BEGIN
SELECT AMOUNT
FROM BankAccount
WHERE ACCOUNT_NO = P_ACCOUNT_NO AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS BankWithdrawAmount;
DELIMITER //
CREATE PROCEDURE BankWithdrawAmount(IN
P_ACCOUNT_NO INT,
P_ACCOUNT_TYPE INT,
P_NEW_BALANCE DOUBLE)
BEGIN
	UPDATE BankAccount
	SET BALANCE = BALANCE - P_NEW_BALANCE 
	WHERE ACCOUNT_NO = P_ACCOUNT_NO
		AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;
INSERT INTO BankTransactionHistory (ACCOUNT_NO, TRANSANCTION_TYPE, ACCOUNT_TYPE, AMOUNT)
VALUES (P_ACCOUNT_NO, 3, P_ACCOUNT_TYPE, P_NEW_BALANCE);
SELECT BALANCE FROM BankAccount WHERE ACCOUNT_NO = P_ACCOUNT_NO AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS BankDepositAmount;
DELIMITER //
CREATE PROCEDURE BankDepositAmount(IN
P_ACCOUNT_NO INT,
P_ACCOUNT_TYPE INT,
P_NEW_BALANCE DOUBLE)
BEGIN
UPDATE BankAccount
SET BALANCE = BALANCE + P_NEW_BALANCE
WHERE ACCOUNT_NO = P_ACCOUNT_NO AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;
INSERT INTO BankTransactionHistory (ACCOUNT_NO, TRANSANCTION_TYPE, ACCOUNT_TYPE, AMOUNT)
VALUES (P_ACCOUNT_NO, 4, P_ACCOUNT_TYPE, P_NEW_BALANCE);
SELECT BALANCE FROM BankAccount WHERE ACCOUNT_NO = P_ACCOUNT_NO AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS BankDeleteAccount;
DELIMITER //
CREATE PROCEDURE BankDeleteAccount(IN
P_USERNAME VARCHAR(50),
P_PASSWORD VARCHAR(50))
BEGIN
UPDATE BankCustomer SET ACTIVE = 0 WHERE USERNAME = P_USERNAME AND PASSWORD1 = P_PASSWORD;

INSERT INTO BankTransactionHistory(ACCOUNT_NO, TRANSANCTION_TYPE)
SELECT ACCOUNT_NO,6 FROM T_CUSTOMER WHERE USERNAME = P_USERNAME;

IF EXISTS(SELECT ACTIVE FROM BankCustomer WHERE USERNAME = P_USERNAME AND PASS = P_PASSWORD AND ACTIVE = 0) THEN 
SELECT 1 AS result;
ELSE SELECT 0 AS result;
END IF;
END//
DELIMITER  ;

DROP PROCEDURE IF EXISTS BankCreateAccount;
DELIMITER //
CREATE PROCEDURE BankCreateAccount(IN
P_F_NAME VARCHAR(50),
P_L_NAME VARCHAR(50),
P_EMAIL VARCHAR(50), 
P_USERNAME VARCHAR(50),
P_PASS VARCHAR(50))
BEGIN
INSERT INTO BankCustomer (EMAIL, F_NAME, L_NAME, USERNAME, PASS)
VALUES (P_EMAIL, P_F_NAME, P_L_NAME, P_USERNAME, P_PASS);

INSERT INTO BankTransactionHistory (ACCOUNT_NO, TRANSANCTION_TYPE)
SELECT ACCOUNT_NO,7 FROM BankCustomer WHERE USERNAME = P_USERNAME;

SELECT ACCOUNT_NO
FROM BankCustomer
WHERE USERNAME = P_USERNAME ;
END//
DELIMITER ;


DROP PROCEDURE IF EXISTS BankLogin;
DELIMITER //
CREATE PROCEDURE BankLogin(IN
P_USERNAME VARCHAR(50),
P_PASSWORD VARCHAR(50))
BEGIN
	IF EXISTS(SELECT ACCOUNT_NO FROM BankCustomer WHERE USERNAME = P_USERNAME AND PASS = P_PASSWORD AND ACTIVE = 0)
		THEN SELECT -1 AS ACCOUNT_NO;
	ELSEIF EXISTS(SELECT ACCOUNT_NO FROM BankCustomer WHERE USERNAME = P_USERNAME AND PASS = P_PASSWORD AND ACTIVE = 1)
		THEN SELECT ACCOUNT_NO FROM BankCustomer WHERE USERNAME = P_USERNAME AND PASS = P_PASSWORD AND ACTIVE = 1;
	ELSE SELECT -2 AS ACCOUNT_NO;
	END IF;
	UPDATE BankCustomer
	SET LAST_LOGIN_DATE = CURRENT_TIMESTAMP WHERE USERNAME = P_USERNAME;
END//
DELIMITER  ;

DROP PROCEDURE IF EXISTS BankCheckUsername;
DELIMITER //
CREATE PROCEDURE BankCheckUsername(IN
P_USERNAME VARCHAR(50))
BEGIN
IF EXISTS(SELECT ACCOUNT_NO FROM BankCustomer WHERE USERNAME = P_USERNAME) THEN SELECT 1 AS result;
ELSE SELECT 0 AS result;
END IF;
END//
DELIMITER  ;

DROP PROCEDURE IF EXISTS BankTransferAmount;
DELIMITER //
CREATE PROCEDURE BankTransferAmount(IN
P_ACCOUNT_NO INT,
P_ACCOUNT_TYPE INT,
P_TO_ACCOUNT_NO INT,
P_TO_ACCOUNT_TYPE INT,
P_NEW_BALANCE DOUBLE)
BEGIN
UPDATE BankAccount
SET BALANCE = BALANCE - P_NEW_BALANCE
WHERE ACCOUNT_NO = P_ACCOUNT_NO AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;

UPDATE BankAccount
SET BALANCE = BALANCE + P_NEW_BALANCE
WHERE ACCOUNT_NO = P_TO_ACCOUNT_NO AND ACCOUNT_TYPE = P_TO_ACCOUNT_TYPE;

INSERT INTO BankTransactionHistory (ACCOUNT_NO, TRANSANCTION_TYPE, ACCOUNT_TYPE, AMOUNT)
VALUES (P_ACCOUNT_NO, 5, P_ACCOUNT_TYPE, 0-P_NEW_BALANCE);

INSERT INTO BankTransactionHistory (ACCOUNT_NO, TRANSANCTION_TYPE, ACCOUNT_TYPE, AMOUNT)
VALUES (P_TO_ACCOUNT_NO, 5, P_TO_ACCOUNT_TYPE, P_NEW_BALANCE);

SELECT BALANCE FROM BankAccount WHERE ACCOUNT_NO = P_ACCOUNT_NO AND ACCOUNT_TYPE = P_ACCOUNT_TYPE;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS BankAccountExists;
DELIMITER //
CREATE PROCEDURE BankAccountExists(IN
P_ACCOUNT_NO INT)
BEGIN
	SELECT ACCOUNT_NO FROM BankCustomer WHERE ACCOUNT_NO = P_ACCOUNT_NO;
END//
DELIMITER ;

